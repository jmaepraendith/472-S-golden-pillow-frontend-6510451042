import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import "./ReviewPage.css";

const ReviewPage = () => {
  const location = useLocation();
  const navigate = useNavigate();

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Order Page
  const {
    order_id = "N/A",
    lot_id = "N/A",
    grade = "N/A",
    username = "Guest",
    product_image: image_path = "default-durian.jpg",
  } = location.state || {};

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
  const [star, setStar] = useState(5);
  const [comment, setComment] = useState("");
  const [reviewId, setReviewId] = useState(null);
  const [isEditing, setIsEditing] = useState(false); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏Å‡πà‡∏≤ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  useEffect(() => {
    const fetchReview = async () => {
      try {
        const response = await fetch(
          `${import.meta.env.VITE_API_URL}/reviews?lot_id=${lot_id}&grade=${grade}&username=${username}`
        );
        const data = await response.json();

        if (data.length > 0) {
          setReviewId(data[0].review_id);
          setStar(data[0].star);
          setComment(data[0].comment);
          setIsEditing(true); // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
        }
      } catch (error) {
        console.error("Error fetching review:", error);
      }
    };

    fetchReview();
  }, [lot_id, grade, username]);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå
  const handleCommentChange = (event) => {
    setComment(event.target.value);
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
  const handleSubmitReview = async () => {
    if (!comment.trim()) return alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå!");

    const reviewData = { lot_id, grade, username, order_id, star, comment };

    try {
      let response;
      if (isEditing) {
        // üõ†Ô∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏µ‡∏ß‡∏¥‡∏ß
        response = await fetch(
          `${import.meta.env.VITE_API_URL}/reviews/edit/${reviewId}`,
          {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(reviewData),
          }
        );
      } else {
        // üõ†Ô∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÉ‡∏´‡∏°‡πà
        response = await fetch(`${import.meta.env.VITE_API_URL}/reviews/create`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(reviewData),
        });
      }

      if (response.ok) {
        alert(isEditing ? "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß!" : "‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
        navigate(-1); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      } else {
        alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÑ‡∏î‡πâ");
      }
    } catch (error) {
      console.error("Error submitting review:", error);
    }
  };

  return (
    <div className="review-page-container">
      <button className="back-button" onClick={() => navigate(-1)}>Back</button>

      <div className="review-header">
        <h1>Grade: {grade} <br /> Lot: {lot_id}</h1>
        <img
          src={`http://localhost:13889${image_path.startsWith("/") ? image_path : `/images/${image_path}`}`}
          onError={(e) => (e.target.src = "http://localhost:13889/images/default-durian.jpg")}
          alt="Product"
          className="product-image"
        />
      </div>

      <div className="review-form">
        <div className="h3-send">
          <h3>Your Review üñçÔ∏è</h3>
        </div>

        {/* ‡∏î‡∏≤‡∏ß‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô */}
        <div className="rating">
          {[1, 2, 3, 4, 5].map((s) => (
            <span
              key={s}
              className={s <= star ? "star filled" : "star"}
              onClick={() => setStar(s)}
            >
              ‚òÖ
            </span>
          ))}
        </div>

        {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå */}
        <textarea
          name="comment"
          value={comment}
          onChange={handleCommentChange}
          placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
        ></textarea>

        {/* ‡∏õ‡∏∏‡πà‡∏° Submit ‡∏´‡∏£‡∏∑‡∏≠ Edit */}
        <button className="submit-button" onClick={handleSubmitReview}>
          {isEditing ? "Edit your review" : "Submit your review"}
        </button>
      </div>
    </div>
  );
};

export default ReviewPage;
